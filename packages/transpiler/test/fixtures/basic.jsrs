pub fn add(a: i32, b: i32) -> i32 {
  a + b
}

pub enum Option<T> {
  Some(T),
  None,
}

pub fn match_test(a: Option<Option<i32>>) -> Option<i32> {
  let A(B(x), C(y)) = a else { return Option::None; };

  if let D(z) = a {
    return Option::Some(z);
  }

  return Option::Some(x + y);
}

pub struct A {
  a: i32,
  b: i32,
}

impl A {
  pub fn new(a: i32, b: i32) -> A {
    A { a, b }
  }

  pub fn add(&self) -> i32 {
    self.a + self.b
  }
}

fn swap(a: &mut i32, b: &mut i32) {
  let a = effect1() + {
    if *a > *b {
      effect2()
    } else {
      return 1;
    }
  } + effect3();

  let tmp = *a;
  *a = *b;
  *b = tmp;
}

pub fn main() {
  let mut a = 1;
  let mut b = 2;
  swap(&mut a, &mut b);
}

pub fn is_alpha(c: char) -> bool {
  match c {
    'x' => {
      console.log("x");
      true
    }, 
    'a'..='z' | 'A'..='Z' => true,
    _ => false,
  }
}

pub fn array() {
  let arr = [1, 2, 3];
  let arr2 = [1; 3];
  
  let x = +arr[0] + arr2[1];

  let s = 1..=3;
  let y = arr[s];

  match arr {
    [1, a, .., b, _] => log(a, b),
    _ => log("other"),
  };
}

pub fn tuple() {
  let t = (1, 2, 3);
  let (a, b, c) = t;
  
  let x = t.0 + t.1;

  match t {
    (1, a, _) => log(a),
    _ => log("other"),
  };
}

pub fn structs(x: A) {
  let A { a, b: c, .. } = x;
}

pub fn closures(x: i32) {
  let s = |a, b: i32| -> i32 {
    a + b
  };
  let t = |x| self.value + 1;
}
